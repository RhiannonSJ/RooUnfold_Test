//=====================================================================-*-C++-*-
// File and Version Information:
//      $Id: RooUnfoldTestHarness2D.icc,v 1.8 2010-01-20 20:36:25 adye Exp $
//
// Description:
//      Harness class to test the RooUnfold package using 2D toy MC generated
//      according to PDFs defined in RooUnfoldTestPdf.icc or RooUnfoldTestPdfRooFit.icc.
//
// Author: Tim Adye <T.J.Adye@rl.ac.uk>
//
//==============================================================================

#ifndef ROOUNFOLDTESTHARNESS2D_ICC
#define ROOUNFOLDTESTHARNESS2D_ICC

#include "RooUnfoldTestHarness2D.h"

#if !defined(__CINT__) || defined(__MAKECINT__)
#include <cmath>
#include <iostream>

#include "TROOT.h"
#include "TCanvas.h"
#include "TRandom.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TVectorD.h"

#include "RooUnfoldResponse.h"
#endif

#include "ArgVars.h"

#if !defined(__CINT__) || defined(__MAKECINT__)
using std::cerr;
using std::endl;
using std::sin;
using std::cos;
#endif

//==============================================================================
// Gaussian smearing, systematic translation, and variable inefficiency
//==============================================================================

void RooUnfoldTestHarness2D::Rot (Double_t& x, Double_t& y, Double_t angle)
{
  if (angle==0.0) return;
  Double_t a= gRandom->Gaus (angle, 0.2*angle);
  Double_t s= sin(a), c= cos(a);
  Double_t xr= c*x - s*y;
  Double_t yr= s*x + c*y;
  x= xr;
  y= yr;
}

Bool_t RooUnfoldTestHarness2D::Smear (Double_t& x, Double_t& y,
                                      Int_t nx, Double_t xlo, Double_t xhi,
                                      Int_t ny, Double_t ylo, Double_t yhi)
{
  Double_t xs= Smear (x, nx, xlo, xhi);
  if (xs==cutdummy) return false;
  Double_t ys= Smear (y, ny, ylo, yhi);
  if (ys==cutdummy) return false;
  x= xs;
  y= ys;
  if (!nosmear) Rot (x, y, rotxy);
  return true;
}

//==============================================================================
// Train unfolding algorithm
//==============================================================================

Int_t RooUnfoldTestHarness2D::Train ()
{
  TVectorD xtrue(ntrain), ytrue(ntrain);

  hPDFx= Generate (xtrue, "trainpdfx", "Training PDF X", ntx, ftrainx, ntrain, xlo, xhi, bkgtx);
  if (!hPDFx) return 0;
  hPDFy= Generate (ytrue, "trainpdfy", "Training PDF Y", nty, ftrainy, ntrain, ylo, yhi, bkgty);
  if (!hPDFy) return 0;

  hTrainTrue= new TH2D ("traintrue", "Training Truth", ntx, xlo, xhi, nty, ylo, yhi);
  hTrainTrue->SetLineColor(kBlue);
  hTrain= new TH2D ("train", "Training Measured", nmx, xlo, xhi, nmy, ylo, yhi);
  hTrain->SetLineColor(kRed);

  response->Setup (hTrain, hTrainTrue);

  for (Int_t i= 0; i<ntrain; i++) {
    Double_t xt= xtrue[i], yt= ytrue[i];
    hTrainTrue->Fill (xt, yt);

    Double_t x= xt, y= yt;
    if (Smear (x, y, ntx, xlo, xhi, nty, ylo, yhi)) {
      hTrain ->Fill (x, y);
      response->Fill (x, y, xt, yt);
    } else {
      response->Miss (xt, yt);
    }
  }

  hTrainTrueX= ProjectionX (hTrainTrue, "hTrainTrueX", "Training X");
  hTrainTrueY= ProjectionY (hTrainTrue, "hTrainTrueY", "Training Y");
  hTrainX=     ProjectionX (hTrain,     "hTrainX",     "Training Measured X");
  hTrainY=     ProjectionY (hTrain,     "hTrainY",     "Training Measured Y");

  setmax (hTrainTrueX, hPDFx, hTrainX);
  setmax (hTrainTrueY, hPDFy, hTrainY);

  canvas->cd(1);
  hTrainTrueX->Draw();
  hPDFx      ->Draw("LSAME");
  hTrainX    ->Draw("SAME");

  canvas->cd(2);
  hTrainTrueY->Draw();
  hPDFy      ->Draw("LSAME");
  hTrainY    ->Draw("SAME");

  canvas->Update();

  return 1;
}

//==============================================================================
// Test unfolding algorithm
//==============================================================================

Int_t RooUnfoldTestHarness2D::Test ()
{
  TVectorD xtest(ntest), ytest(ntest);

  hTestPDFx= Generate (xtest, "pdfx", "PDF X", ntx, ftestx, ntest, xlo, xhi, bkgex, 1.0, 2.5);
  if (!hTestPDFx) return 0;
  hTestPDFy= Generate (ytest, "pdfy", "PDF Y", nty, ftesty, ntest, ylo, yhi, bkgey, -0.5, 2.5);
  if (!hTestPDFy) return 0;

  hTrue= new TH2D ("true", "Test Truth", ntx, xlo, xhi, nty, ylo, yhi);
  hTrue->SetLineColor(kBlue);
  hMeas= new TH2D ("meas", "Test Measured", nmx, xlo, xhi, nmy, ylo, yhi);
  hMeas->SetLineColor(kRed);

  for (Int_t i=0; i<ntest ; i++) {
    Double_t xt= xtest[i], yt= ytest[i];
    hTrue->Fill (xt, yt);
    Double_t x= xt, y= yt;
    if (Smear (x, y, ntx, xlo, xhi, nty, ylo, yhi))
      hMeas->Fill (x, y);
  }

  hTrueX= ProjectionX (hTrue, "hTrueX", "Test X");
  hTrueY= ProjectionY (hTrue, "hTrueY", "Test Y");
  hMeasX= ProjectionX (hMeas, "hMeasX", "Test Measured X");
  hMeasY= ProjectionY (hMeas, "hMeasY", "Test Measured Y");

  return 1;
}

//==============================================================================
// Show results
//==============================================================================

void RooUnfoldTestHarness2D::Results()
{
  hRecoX= ProjectionX (hReco, "hRecoX", "Reconstructed X", "E");
  hRecoY= ProjectionY (hReco, "hRecoY", "Reconstructed Y", "E");
  hRecoX->SetMarkerStyle(8);
  hRecoY->SetMarkerStyle(8);

  setmax (hTrueX, hTestPDFx, hMeasX, hRecoX);
  setmax (hTrueY, hTestPDFy, hMeasY, hRecoY);

  canvas->cd(3);
  hTrueX   ->Draw();
  hTestPDFx->Draw("LSAME");
  hMeasX   ->Draw("SAME");
  hRecoX   ->Draw("SAME");

  canvas->cd(4);
  hTrueY   ->Draw();
  hTestPDFy->Draw("LSAME");
  hMeasY   ->Draw("SAME");
  hRecoY   ->Draw("SAME");

  canvas->cd(5);
  hTrue->Draw();

  canvas->cd(6);
  hMeas->Draw();

  canvas->cd(7);
  hReco->Draw();

  canvas->cd(8);
  hPulls->Draw("COLZ");
  canvas->Update();
}

Int_t RooUnfoldTestHarness2D::CheckParms()
{
  RooUnfoldTestHarness::CheckParms();
  if (nmy<=0)     {cerr << "Error: nmy ("    << nmy    << ") <= 0"                  << endl; error = 2;}
  if (nty<=0)     {cerr << "Error: nty ("    << nty    << ") <= 0"                  << endl; error = 2;}
  if (ylo >= yhi) {cerr << "Error: ylo ("    << ylo    << ") >= yhi(" << yhi << ")" << endl; error = 2;}
  if (ftrainy<0)  {cerr << "Error: ftrainy ("<< ftrainy<< ") < 0"                   << endl; error = 2;}
  if (ftesty<0)   {cerr << "Error: ftesty (" << ftesty << ") < 0"                   << endl; error = 2;}
  return error;
}

void RooUnfoldTestHarness2D::Init()
{
  RooUnfoldTestHarness::Init();
  if (nty==-1) nty= ntx;
  if (nmy==-1) nmy= nty;
  if (bkgty==-1.0) bkgty= bkgtx;
  if (bkgey==-1.0) bkgey= bkgex;
  ntbins= ntx*nty;
  nmbins= nmx*nmy;
}

//==============================================================================
// Constructor
//==============================================================================

RooUnfoldTestHarness2D::RooUnfoldTestHarness2D (const char* name)
  : RooUnfoldTestHarness(name)
{
  Reset();
  SetDefaults();
}

RooUnfoldTestHarness2D::RooUnfoldTestHarness2D (const char* name, int argc, const char* const* argv)
  : RooUnfoldTestHarness(name)
{
  Reset();
  error= SetArgs (argc, argv);
}

RooUnfoldTestHarness2D::RooUnfoldTestHarness2D (const char* name, const char* args)
{
  Reset();
  const char* const argv[]= { name, args };
  error= SetArgs (2, argv, true);
}

void RooUnfoldTestHarness2D::Reset()
{
  RooUnfoldTestHarness::Reset();
  hTrainX= hTrainTrueX= hTrueX= hMeasX= hRecoX=
  hTrainY= hTrainTrueY= hTrueY= hMeasY= hRecoY= hPDFy= hTestPDFy= 0;
  dim= 2;
}

void RooUnfoldTestHarness2D::Parms (ArgVars& args)
{
  RooUnfoldTestHarness::Parms (args);
  args.SetDefault ("ftrainx", 1);
  args.SetDefault ("ftestx",  3);
  args.SetDefault ("onepage", 8);
  args.Add ("ftrainy", &ftrainy,     1, "training Y PDF");
  args.Add ("ftesty",  &ftesty ,     5, "test Y PDF");
  args.Add ("nty",     &nty,        -1, "#truth Y bins", "ntx");
  args.Add ("nmy",     &nmy,        -1, "#measured Y bins", "nty");
  args.Add ("ylo",     &ylo,     -12.5, "Y range minimum");
  args.Add ("yhi",     &yhi,      10.0, "Y range maximum");
  args.Add ("bkgty",   &bkgty,    -1.0, "background fraction for training Y PDF", "bkgtx");
  args.Add ("bkgey",   &bkgey,    -1.0, "background fraction for test Y PDF", "bkgex");
  args.Add ("rotxy",   &rotxy,     0.4, "rotation angle in XY plane");
}

#endif
