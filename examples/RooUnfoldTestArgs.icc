#ifndef ROOUNFOLDTESTARGS_ICC
#define ROOUNFOLDTESTARGS_ICC

#if !defined(__CINT__) || defined(__MAKECINT__)
#include "TROOT.h"
#include <iostream>
#include <cstring>
#include <cstdlib>
using std::cout;
using std::cerr;
using std::endl;
#endif

typedef struct { const char *name; Int_t *ivar; Double_t *fvar; } setargs_t;

bool setargs (const setargs_t* const args, int nargs, int argc, const char* const* argv, bool split= false)
{
  const char* prog= strrchr (argv[0], '/');
  if (prog) prog++; else prog= argv[0];
  if (argc==2 && (strcmp(argv[1],"-h")==0 || strcmp(argv[1],"--help")==0)) {
    cout << "Defaults: " << prog;
    for (int j= 0; j<nargs; j++) {
      cout << ' ' << args[j].name << '=';
      if (args[j].ivar) cout << *(args[j].ivar);
      else              cout << *(args[j].fvar);
    }
    cout << endl;
    return false;
  }
  int err= 0, iarg= 0;
  for (int i= 1; i<argc; i++) {
    const char* p= argv[i];
    do {
      if (split) {
        while (*p==' ') p++;
        if (*p=='\0') break;
      }
      bool found= false;
      const char* d= strchr (p, '=');
      const char* q= 0;
      if (d) {
        size_t nv= d-p;
        if (split) {
          while (nv>0 && p[nv-1]==' ') nv--;
        }
        for (int j= 0; j<nargs; j++) {
          if (strncmp (p, args[j].name, nv) == 0) {
            char* next= 0;
            if (args[j].ivar) *(args[j].ivar)= strtol (d+1, &next, 10);
            else              *(args[j].fvar)= strtod (d+1, &next);
            found= (next && next>d+1 && (*next=='\0' || (split && *next==' ')));
            if (split && next && *next==' ') q= next+1;
            break;
          }
        }
      } else if (iarg<nargs) {  // positional argument?
        char* next= 0;
        if (args[iarg].ivar) *(args[iarg].ivar)= strtol (p, &next, 10);
        else                 *(args[iarg].fvar)= strtod (p, &next);
        found= (next && next>p && (*next=='\0' || (split && *next==' ')));
        if (split && next && *next==' ') q= next+1;
        iarg++;
      }
      if (!found) {
        cerr << prog << ": unrecognised parameter: " << p << endl;
        err++;
      }
      p= q;
    } while (p);
  }
  return !err;
}

#endif
