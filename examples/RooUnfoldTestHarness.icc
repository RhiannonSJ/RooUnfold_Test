//=====================================================================-*-C++-*-
// File and Version Information:
//      $Id: RooUnfoldTestHarness.icc,v 1.7 2010-01-20 15:41:36 adye Exp $
//
// Description:
//      Harness class to test the RooUnfold package using toy MC generated
//      according to PDFs defined in RooUnfoldTestPdf.icc or RooUnfoldTestPdfRooFit.icc.
//
// Authors: Tim Adye <T.J.Adye@rl.ac.uk> and Fergus Wilson <fwilson@slac.stanford.edu>
//
//==============================================================================

#ifndef ROOUNFOLDTESTHARNESS_ICC
#define ROOUNFOLDTESTHARNESS_ICC

#include "RooUnfoldTestHarness.h"

#ifndef NOROOFIT
#define USE_ROOFIT
#endif

#include <cfloat>
#if !defined(__CINT__) || defined(__MAKECINT__)
#include <cmath>
#include <iostream>

#include "TROOT.h"
#include "TString.h"
#include "TStyle.h"
#include "TCanvas.h"
#include "TRandom.h"
#include "TPostScript.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TFile.h"
#include "TVectorD.h"
#include "TLine.h"

#include "RooUnfoldResponse.h"
#include "RooUnfoldBayes.h"
#include "RooUnfoldSvd.h"
#include "RooUnfoldBinByBin.h"
#endif

#include "ArgVars.icc"

//==============================================================================
// MC generation routine: RooUnfoldTestPdf()
// This routine is included inline so it does not have to be part of the library
// and does not need to be loaded explicitly from the ROOT prompt.
//==============================================================================

#ifdef USE_ROOFIT
#include "RooUnfoldTestPdfRooFit.icc"
#else
#include "RooUnfoldTestPdf.icc"
#endif

#if !defined(__CINT__) || defined(__MAKECINT__)
using std::fabs;
using std::cout;
using std::cerr;
using std::endl;
#endif

//==============================================================================
// Utility routines
//==============================================================================

//==============================================================================
// Set histogram Y-axis display range
//==============================================================================

void RooUnfoldTestHarness::setmax (TH1* h,
                                   const TH1* h1, const TH1* h2, const TH1* h3,
                                   const TH1* h4, const TH1* h5, const TH1* h6)
{
  // Get the maximum y value of up to 7 histograms
  // Add 10% to match behaviour of ROOT's automatic scaling
  Double_t maxval= h1 ? h1->GetMaximum() : -DBL_MAX;
  if (h2 && h2->GetMaximum() > maxval) maxval= h2->GetMaximum();
  if (h3 && h3->GetMaximum() > maxval) maxval= h3->GetMaximum();
  if (h4 && h4->GetMaximum() > maxval) maxval= h4->GetMaximum();
  if (h5 && h5->GetMaximum() > maxval) maxval= h5->GetMaximum();
  if (h6 && h6->GetMaximum() > maxval) maxval= h6->GetMaximum();
  if (maxval > h->GetMaximum()) h->SetMaximum (1.1*maxval);
}

//==============================================================================
// Gaussian smearing, systematic translation, and variable inefficiency
//==============================================================================

Double_t RooUnfoldTestHarness::smear (Double_t xt, Int_t nt, Double_t xlo, Double_t xhi)
{
  // Apply a gaussian smearing, systematic translation, and an efficiency
  // function to the truth.
  // Efficiency: 30% at x=xlo, 100% at x=xhi.
  // Shift = -10% of the range.
  // Smear = half a bin width.

  const Double_t ylo= 0.3, yhi= 1.0, relshift= -0.1, binsmear= 0.5;
  Double_t xwidth =  (xhi-xlo);

  Double_t slope = (yhi-ylo) / xwidth;
  Double_t yeff= ylo + slope * (xt-xlo);  // efficiency

  // MC test: if random number > eff then reject
  if (gRandom->Rndm() > yeff)  return cutdummy;
  if (nosmear) return xt;   // bin-by-bin correction can't handle bias and smearing

  Double_t xshift = xwidth*relshift;                 // shift
  Double_t xsigma = xwidth*binsmear / Double_t(nt);  // smear sigma

  Double_t xsmear= gRandom->Gaus(xshift, xsigma);     // bias and smear
  //cout << "SMEAR " << xt << " " << xsmear << " " << xwidth << " " << xsigma << endl;
  return xt+xsmear;
}

TH1D* RooUnfoldTestHarness::Generate (TVectorD& x, const char* name, const char* title,
                                      Int_t nt, Int_t fpdf, Int_t nx, Double_t xlo, Double_t xhi,
                                      Double_t bkg, Double_t mean, Double_t width)
{
  TH1D* hPDF= new TH1D (name, title, nbPDF, xlo, xhi);
  hPDF->SetLineColor(kGreen);
  hPDF->SetLineWidth(2);
  if (!RooUnfoldTestPdf (fpdf, nx, xlo, xhi, x, hPDF, mean, width, bkg)) return 0;
  hPDF->Scale (nbPDF/Double_t(nt));
  return hPDF;
}

//==============================================================================
// Train unfolding algorithm
//==============================================================================

Int_t RooUnfoldTestHarness::Train()
{
  TVectorD xtrue(ntrain);
  hPDFx= Generate (xtrue, "trainpdfx", "Training PDF X", ntx, ftrainx, ntrain, xlo, xhi, bkgtx);
  if (!hPDFx) return 0;

  hTrainTrue= new TH1D ("traintrue", "Training", ntx, xlo, xhi);
  hTrainTrue->SetLineColor(kBlue);
  hTrain= new TH1D ("train", "Training Measured", nmx, xlo, xhi);
  hTrain->SetLineColor(kRed);
  hResmat= new TH2D ("resmat", "Response Matrix", nmx, xlo, xhi, ntx, xlo, xhi);

  response->Setup (nmx, xlo, xhi, ntx, xlo, xhi);
  //  response->Setup (hTrain, hTrainTrue);

  for (Int_t i= 0; i<ntrain; i++) {
    Double_t xt= xtrue[i];
    hTrainTrue->Fill (xt);
    Double_t x= smear (xt, ntx, xlo, xhi);
    if (x!=cutdummy) {
      hTrain  ->Fill (x);
      hResmat ->Fill (x, xt);
      response->Fill (x, xt);
    } else
      response->Miss (xt);
  }

  //  response->Setup (hTrain, hTrainTrue, hResmat);

  setmax (hTrainTrue, hPDFx, hTrain);

  if (onepage>=4) canvas->cd(++ipad);
  if (!onepage || onepage >= 4) {
    hTrainTrue->Draw();
    hPDFx ->Draw("LSAME");
    hTrain->Draw("SAME");
    canvas->Update();
  }

  return 1;
}

//==============================================================================
// Test distribution
//==============================================================================

Int_t RooUnfoldTestHarness::Test()
{
  TVectorD xtest(ntest);
  hTestPDFx= Generate (xtest, "pdfx", "PDF X", ntx, ftestx, ntest, xlo, xhi, bkgex, 1.0, 2.0);
  if (!hTestPDFx) return 0;

  hTrue= new TH1D ("true", "Test", ntx, xlo, xhi);
  hTrue->SetLineColor(kBlue);
  hMeas= new TH1D ("meas", "Test Measured", nmx, xlo, xhi);
  hMeas->SetLineColor(kRed);
  for (Int_t i=0; i<ntest ; i++) {
    Double_t xt= xtest[i];
    hTrue->Fill(xt);
    Double_t x = smear (xt, ntx, xlo, xhi);
    if (x!=cutdummy)
      hMeas->Fill(x);
  }

  return 1;
}

//==============================================================================
// Unfold
//==============================================================================

Int_t RooUnfoldTestHarness::Unfold ()
{
  cout << "Create RooUnfold object for method " << method << endl;
  switch (method) {
    case 1:  unfold= new RooUnfoldBayes    (response, hMeas, regparm);
             break;
    case 2:  unfold= new RooUnfoldSvd      (response, hMeas, regparm, ntoys);
             break;
    case 3:  unfold= new RooUnfoldBinByBin (response, hMeas);
             break;
    default: cerr << "Unknown RooUnfold method " << method << endl;
             return 0;
  }
  cout << "Created "; unfold->Print();
  hReco= unfold->Hreco(doerror);
  unfold->PrintTable (cout, hTrue, doerror);
  return 1;
}

//==============================================================================
// Show results
//==============================================================================

void RooUnfoldTestHarness::Results()
{
  hReco->SetLineColor(kBlack);
  hReco->SetMarkerStyle(kFullDotLarge);
  setmax (hTrue, hTestPDFx, hMeas, hReco);

  if (onepage) canvas->cd(++ipad);
  hTrue    ->Draw();
  hTestPDFx->Draw("LSAME");
  hMeas    ->Draw("SAME");
  hReco    ->Draw("SAME");
  // canvas->Update();

  // I think hReco already includes the statistical error on hTrue, so
  // don't include that twice when calculating residuals.
  hTrue0= (TH1D*) hTrue->Clone();
  hTrue0->SetNameTitle("true0", "Truth with zero errors");
  for (Int_t i = 0 ; i <= ntx+1 ; i++)
    hTrue0->SetBinError (i, 0.0);

  hRes= new TH1D ("reco-true", "Residuals", ntx, xlo, xhi);
  hRes->SetMarkerStyle(kFullDotLarge);
  hRes->Sumw2();
  hRes->Add (hTrue0, hReco, -1, 1);

  if (onepage>=2) canvas->cd(++ipad);
  if (!onepage || onepage >= 2) {
    hRes->Draw();
    TLine l; // draw a line at y=0;
    l.DrawLine(hRes->GetBinLowEdge(1), 0.0, hRes->GetBinLowEdge(ntx+1), 0.0);
    //   canvas->Update();
  }

  // how about doing some pulls
  hPulls = new TH1D ("pulls", "Pulls", ntx, xlo, xhi);
  const Double_t MAXPULL = 5.0;

  for (Int_t i = 0 ; i <= ntx+1; i++) {

    Double_t ydiff    = hRes->GetBinContent(i);
    Double_t ydiffErr = hRes->GetBinError(i);

    Double_t ypull;
    if (ydiffErr==0) {
      ypull= ydiff> 0 ? MAXPULL : -MAXPULL;
    } else {
      ypull = ydiff/ydiffErr;
    }

    //cout << ypull << " " << ydiffErr << endl;

    if (fabs(ypull)<=MAXPULL) {
      hPulls->SetBinContent(i,ypull);
      hPulls->SetBinError(i,1.0);
    }
  }

  if (onepage>=2) canvas->cd(++ipad);
  if (!onepage || onepage >= 2) {
    hPulls->SetMarkerStyle(kFullDotLarge);
    hPulls->Draw("P");
    TLine l; // draw a line at y=0;
    l.DrawLine(hPulls->GetBinLowEdge(1), 0.0, hPulls->GetBinLowEdge(ntx+1), 0.0);
    //    canvas->Update();
  }
 canvas->Update();

}

void RooUnfoldTestHarness::Print (std::ostream& o) const
{
  o << GetName() << " (";
  PrintParms (o, ", ");
  o << ')' << endl;
}

void RooUnfoldTestHarness::PrintParms (std::ostream& o, const char* sep) const
{
  ArgVars args;
  const_cast<RooUnfoldTestHarness*>(this)->Parms (args);
  args.Print (o, sep);
}

Int_t RooUnfoldTestHarness::CheckParms()
{
  // some stupid tests
  if (xlo >= xhi) {cout << "Error: xlo ("    << xlo    << ") >= xhi(" << xhi << ")" << endl; error = 2;}
  if (ntest<=0)   {cout << "Error: ntest ("  << ntest  << ") <= 0"                  << endl; error = 2;}
  if (ntrain<=0)  {cout << "Error: ntrain (" << ntrain << ") <= 0"                  << endl; error = 2;}
  if (nmx<=0)     {cout << "Error: nmx ("    << nmx    << ") <= 0"                  << endl; error = 2;}
  if (ntx<=0)     {cout << "Error: ntx ("    << ntx    << ") <= 0"                  << endl; error = 2;}
  if (ftestx<1)   {cout << "Error: ftestx (" << ftestx << ") < 1"                   << endl; error = 2;}
  if (ftrainx<1)  {cout << "Error: ftrainx ("<< ftrainx<< ") < 1"                   << endl; error = 2;}
  return error;
}

void RooUnfoldTestHarness::Init()
{
  if (nmx==-1) nmx= ntx;
  ntbins= ntx;
  nmbins= nmx;
}

void RooUnfoldTestHarness::Init2()
{
  if (method == 3) nosmear= true;  // bin-by-bin can't handle smearing or bias
  if (regparm==-999) regparm= (method==1 ? 2 : method==2 ? (ntbins>5 ? ntbins/2 : 2) : 0);
  if (doerror==-1) {
    doerror= !(method==1 && ntbins*nmbins > 160000);
    if (!doerror) {
      cerr << "Don't calculate errors for Bayes algorithm - there are " << ntbins*nmbins
           << " bins in response matrix and the error calculation would take too long (set doerror=1 to override this)" << endl;
    }
  }
}

Int_t RooUnfoldTestHarness::Run()
{
  Init();
  if (error) return error;
  Init2();
  Print (cout);
  CheckParms();
  if (error) return error;

  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(0);
  if (onepage) gStyle->SetCanvasDefH(900);
  TString psfile(GetName());
  psfile += ".ps";
  TPostScript ps (psfile, 111);
  canvas= new TCanvas(GetName(),GetName(),1);
  canvas->Clear();

  if (onepage==2) {
    gStyle->SetPadTopMargin(0.05);
    gStyle->SetPadRightMargin(0.02);
    gStyle->SetPadBottomMargin(0.08);
    gStyle->SetPadLeftMargin(0.06);
    canvas->Divide(1,2);
    TPad* pad1= (TPad*) canvas->GetPad(1);
    TPad* pad2= (TPad*) canvas->GetPad(2);
    pad1->SetPad (pad1->GetXlowNDC(), .3, pad1->GetXlowNDC()+pad1->GetWNDC(), pad1->GetYlowNDC()+pad1->GetHNDC());
    pad2->SetPad (pad2->GetXlowNDC(), pad2->GetYlowNDC(), pad2->GetXlowNDC()+pad2->GetWNDC(), .3);
    pad1->SetGrid(1);
    pad2->SetGrid(1);
  } else if (onepage>=6) {
    canvas->SetGrid();
    canvas->Divide(2,(onepage+1)/2);
  } else if (onepage>=3)
    canvas->Divide(1,onepage);
  else
    canvas->SetGrid(1);
  ipad= 0;

  Int_t err= RunStuff();

  ps.Close();
  return err;
}

Int_t RooUnfoldTestHarness::RunStuff()
{
  if (stage != 2) {
    TString name("response"), title;
    title.Form ("test %dD Unfolding", dim);
    response= new RooUnfoldResponse (name, title);
    if (!response) return 3;
    cout   << "==================================== TRAIN ====================================" << endl;
    if (!Train()) return 4;
    TString file (GetName());
    file += ".root";
    TFile f (file, "recreate");
    f.WriteTObject (response, "response");
    f.Close();
  }

  if (stage != 1) {
    if (!response) {
      TString file (GetName());
      file += ".root";
      TFile f (file);
      f.GetObject ("response", response);
      f.Close();
      if (!response) {
        cerr << "could not read 'response' object from file RooUnfoldTest.root" << endl;
        return 5;
      }
    }
    cout   << "==================================== TEST =====================================" << endl;
    if (!Test())   return 6;
    cout << "==================================== UNFOLD ===================================" << endl;
    if (!Unfold()) return 7;
    Results();
  }
  return 0;
}

//==============================================================================
// Constructor
//==============================================================================

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name)
  : TNamed(name,name)
{
  Reset();
  SetDefaults();
}

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name, int argc, const char* const* argv)
  : TNamed(name,name)
{
  Reset();
  error= SetArgs (argc, argv);
}

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name, const char* args)
  : TNamed(name,name)
{
  Reset();
  const char* const argv[]= { name, args };
  error= SetArgs (2, argv, true);
}

RooUnfoldTestHarness::~RooUnfoldTestHarness()
{
  delete response; response= 0;
  delete unfold;   unfold=   0;
  delete canvas;   canvas=   0;
}

void RooUnfoldTestHarness::Reset()
{
  response= 0;
  unfold= 0;
  canvas= 0;
  hPDFx= hTestPDFx= 0;
  hTrain= hTrainTrue= hTrue= hMeas= hReco= hTrue0= hRes= hPulls= 0;
  hResmat= 0;
  nosmear= false;
  error= ipad= 0;
  dim= 1;
}

int RooUnfoldTestHarness::SetArgs (int argc, const char* const* argv, bool split)
{
  ArgVars args;
  Parms (args);
  return args.SetArgs (argc, argv, split);
}

void RooUnfoldTestHarness::SetDefaults()
{
  ArgVars args;
  Parms (args);
  args.SetDefaults();
}

void RooUnfoldTestHarness::Parms (ArgVars& args)
{
  args.Add ("method",  &method,       1, "RooUnfold method: 1=Bayes, 2=SVD, 3=bin-by-bin");
  args.Add ("stage",   &stage,        0, "1=train (writes RooUnfoldTest.root), 2=test (reads), 0=both (default)");
  args.Add ("ftrainx", &ftrainx,      2, "training X PDF");
  args.Add ("ftestx",  &ftestx,       5, "test X PDF");
  args.Add ("ntx",     &ntx,         40, "#truth X bins");
  args.Add ("nmx",     &nmx,         -1, "#measured X bins", "ntx");
  args.Add ("ntest",   &ntest,    10000, "#events to use for testing");
  args.Add ("ntrain",  &ntrain,  100000, "#events to use for training");
  args.Add ("xlo",     &xlo,      -12.5, "X range minimum");
  args.Add ("xhi",     &xhi,       10.0, "X range maximum");
  args.Add ("regparm", &regparm,   -999, "regularisation parameter (default: Bayes niter=4, SVD kterm=20)", "");
  args.Add ("ntoys",   &ntoys,     1000, "number of toys used to obtain SVD covariances");
  args.Add ("onepage", &onepage,      4, "number of pads per page");
  args.Add ("doerror", &doerror,     -1, "calculate errors (default=1 unless this will take a very long time)", "1");
  args.Add ("bkgtx",   &bkgtx,      0.2, "background fraction for training X PDF");
  args.Add ("bkgex",   &bkgex,      0.3, "background fraction for test X PDF");
}

#endif
